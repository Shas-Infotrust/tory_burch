
/*
CODE DESCRIPTION
This breaks up the revised_ids_ALL architecture, where session_id gets updated as the data becomes available, versus you may want to update your User ID on a less frequent basis. Session ID only needs the same day's data, while Revised User IDs are revised based on 30 days' worth of future data. 

This code is if you want to directly update Session IDs with your GA4 Export Table, instead of querying it from the Revised IDs table

Includes both null and non-null pseudo IDs, but revises IDs only for non-null values.

*/


-- This query has been restructured to correctly process revised IDs for events
-- with a user_pseudo_id, while still including events where the user_pseudo_id is null.

-- Step 1: Separate the data into two streams: one with a pseudo_id and one without.
WITH events_with_pseudo_id AS (
    SELECT *,
    parse_date('%Y%m%d',event_date) as date,
    concat(user_pseudo_id, 'a', (select value.int_value from unnest(event_params) where key = 'ga_session_id')) as session_id,
    FROM `tb-clickstream.analytics_262180980.events_*`
    ----USE TABLE SUFFIX for Procedure, will need to re-format into date
    WHERE user_pseudo_id IS NOT NULL
),

events_without_pseudo_id AS (
    SELECT 
    *,
    parse_date('%Y%m%d',event_date) as date,
    CAST(NULL AS STRING) AS session_id,
    FROM `tb-clickstream.analytics_262180980.events_*`
     ----USE TABLE SUFFIX for Procedure, will need to re-format into date
    WHERE user_pseudo_id IS NULL
),

-- Step 2: Run all the complex identity resolution logic ONLY on the data that has a pseudo_id.
events as 
(select
    *,
    first_value(COALESCE(user_id, (SELECT up.value.string_value FROM UNNEST (user_properties) up WHERE up.key = 'idm_id')) ignore nulls) over(
      partition by concat(user_pseudo_id, 'a', (select value.int_value from unnest(event_params) where key = 'ga_session_id'))
      order by
        event_timestamp asc
        rows between unbounded preceding and unbounded following
    ) as back_fill_user_id,
    first_value(COALESCE(user_id, (SELECT up.value.string_value FROM UNNEST (user_properties) up WHERE up.key = 'idm_id')) ignore nulls) over(
      partition by user_pseudo_id
      order by
        event_timestamp asc
        range between 0 following and 2592000000000 following
    ) as next_user_id,
  FROM
  events_with_pseudo_id
),

  new_id as
  (select 
    *, 
    COALESCE(back_fill_user_id, next_user_id, user_pseudo_id) as id
  from events
  ),

  user_session as 
  (select
    last_value(event_timestamp) over (partition by id order by  event_timestamp asc range between 1800000000 preceding and 1 preceding) as l_ts,
    first_value(event_timestamp) over (partition by id order by  event_timestamp asc range between 1 following and 1800000000 following) as n_ts,
    *
    from new_id),

  revised_session as 
  (select *, 
  last_value(start_session_id ignore nulls) over(
      partition by id
      order by  event_timestamp asc
    ) as revised_session_id
    from
  (select
  case when l_ts is null and n_ts is not null then session_id
  when l_ts is null and n_ts is null then session_id
  else null end as start_session_id,
  * from user_session)),
  
  revised_pseudoid as (
  select *, 
  first_value(user_pseudo_id ignore nulls) over(
      partition by revised_session_id
      order by
        event_timestamp asc) as revised_user_pseudo_id
  from revised_session
  ),

-- Step 3: Prepare the final revised data for events that had a pseudo_id.
revised_id_data AS (
    SELECT
      * EXCEPT (back_fill_user_id, next_user_id,id,l_ts,n_ts,start_session_id)
    FROM revised_pseudoid
),

-- Step 4: Prepare the data for events that did NOT have a pseudo_id.
-- We create null columns for the revised IDs to match the schema.
null_pseudo_data AS (
    SELECT
        *,
        CAST(NULL AS STRING) AS revised_session_id,
        CAST(NULL AS STRING) AS revised_user_pseudo_id
    FROM events_without_pseudo_id
)

-- Step 5: Combine the two datasets to get the final, complete table.
SELECT * FROM revised_id_data
UNION ALL
SELECT * FROM null_pseudo_data
