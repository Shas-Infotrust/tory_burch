CREATE OR REPLACE PROCEDURE `bigquery-prod-356116.ga4_2_PipelineAutomation.r_ga4_2_ScheduledQuery`(interval_start_date INT64, interval_end_date INT64, source_table STRING, source_date_field STRING, source_field_check_values STRING, destination_table STRING, destination_date_field STRING, destination_field_check_values STRING, query_view STRING, query_date_field STRING)
OPTIONS (description="- interval_start_date: The start of the date range, as days ago from today.\n- interval_end_date: The end of the date range, as days ago from today.\n- source_table: The source table (e.g., `project.dataset.table_*`).\n- source_date_field: Date field in the source table.\n- source_field_check_values: The field that is checked to ensure that each date contains non-null values in a particular field. If not applicable, just add date. \n- destination_table: The target table for the DELETE and INSERT operations.\n- destination_date_field: Date field in the destination table. \n- destination_field_check_values: The field that is checked to ensure that each date contains non-null values in a particular field. If not applicable, just add date. \n- query_view: The view that is used to query data for insertion.\n- query_date_field: The date field withing the view. Important as it prevents the entire date range to run. ")
BEGIN

/*
This stored procedure deletes data within a specified date range from a destination table
and inserts fresh data from a source view into the destination table, after performing data validation checks.


Arguments:
- interval_start_date: The start of the date range, as days ago from today.
- interval_end_date: The end of the date range, as days ago from today.
- source_table: The source table (e.g., `project.dataset.table_*`).
- source_date_field: Date field in the source table.
- source_field_check_values: The field that is checked to ensure that each date contains non-null values in a particular field. If not applicable, just add date. 
- destination_table: The target table for the DELETE and INSERT operations.
- destination_date_field: Date field in the destination table. 
- destination_field_check_values: The field that is checked to ensure that each date contains non-null values in a particular field. If not applicable, just add date. 
- query_view: The view that is used to query data for insertion.
- query_date_field: The date field withing the view. Important as it prevents the entire date range to run. 
*/

-- Step 1: Declare variables. This makes them available to the entire script.
DECLARE StartDate, EndDate DATE;
DECLARE expected_day_count, source_day_count, destination_day_count INT64;

-- Step 2: Set the DATE variables
SET (StartDate, EndDate) = (
  SELECT
    AS STRUCT 
      DATE_SUB(CURRENT_DATE(), INTERVAL interval_start_date DAY),
      DATE_SUB(CURRENT_DATE(), INTERVAL interval_end_date DAY)
);

-- Step 3: Calculate the expected number of days in the date range
SET expected_day_count = DATE_DIFF(EndDate, StartDate, DAY) + 1;

-- Step 4a: Check source table to ensure all days exist before trying to add them. 
--Count how many distinct days of data actually exist in the source table.
EXECUTE IMMEDIATE FORMAT("""
  SELECT COUNT(DISTINCT %s)
  FROM `%t`
  WHERE %s BETWEEN ? AND ?
  AND %s IS NOT NULL
""",source_date_field, source_table, source_date_field, source_field_check_values)
INTO source_day_count
USING StartDate, EndDate;


-- Step 4b: Check if the SOURCE table contains all existing dates specified. If not, raise an error and exit.
IF source_day_count != expected_day_count THEN
  RAISE USING MESSAGE = FORMAT(
    "Source table validation failed. Expected %d days with %s values. Found %d days. Destination table was not modified. Source Table:`%s`. Destination Table: `%s`",
    expected_day_count, 
    source_field_check_values,
    source_day_count,
    source_table,
    destination_table
  );
END IF;


--Step 5a: Validate the DESTINATION table.
EXECUTE IMMEDIATE FORMAT ("""
SELECT COUNT(DISTINCT(%s))
FROM `%t`
WHERE %s between ? and ?
AND %s IS NOT NULL
""", destination_date_field, destination_table, destination_date_field, destination_field_check_values)
INTO destination_day_count
USING StartDate, EndDate;



--Step 5b: Check if the destination data has the specified dates. If all specified dates exist, then don't run the query. Raise error and exit. 
IF destination_day_count < expected_day_count THEN

  BEGIN TRANSACTION; --makes sure operations are atomic. If any part of the block fails, it will automatically "roll back" all the changes made inside that block. So, if the INSERT fails, the DELETE is undone as if it never happened

  BEGIN

EXECUTE IMMEDIATE FORMAT("""
DELETE FROM `%t`
WHERE %s BETWEEN ? AND ?
""", destination_table, query_date_field)
USING StartDate, EndDate;

EXECUTE IMMEDIATE FORMAT("""
INSERT INTO `%t`
SELECT * FROM `%t`
WHERE %s BETWEEN ? and ?
""", destination_table, query_view, query_date_field)
USING StartDate, EndDate;

COMMIT TRANSACTION;

EXCEPTION WHEN ERROR THEN
    -- If any error occurs, the transaction is rolled back automatically.
    RAISE USING MESSAGE = FORMAT("Data processing failed for range %t to %t. Job rolled back. Original Error: %s", StartDate, EndDate, @@error.message);

  END;
  
END IF;
-- If the condition above is false, the procedure completes successfully without taking action.

END;
